;; NOTE: This namespace is generated by java-time.dev.gen
(ns java-time (:refer-clojure :exclude (zero? range iterate max min contains? format abs)) (:require java-time.impl.load))
(defmacro with-clock {:doc "Executes the given `forms` in the scope of the provided `clock`.\n\n  All the temporal entities that get created without parameters will inherit\n  their values from the clock:\n\n    (with-clock (system-clock \"Europe/London\")\n      (zone-id))\n    => #<java.time.ZoneRegion Europe/London>"} [c & forms] (list* (quote java-time.clock/with-clock) c forms))
(defmacro when-joda-time-loaded {:doc "Execute the `body` when Joda-Time classes are found on the classpath.\n\n  Take care - when AOT-compiling code using this macro, the Joda-Time classes\n  must be on the classpath at compile time!"} [& body] (list* (quote java-time.util/when-joda-time-loaded) body))
(def ^{:arglists (quote ([^Clock c f]))} with-clock-fn (java-time.impl.load/slow-path (quote java-time.clock/with-clock-fn)))
(def ^{:arglists (quote ([a]))} zero? (java-time.impl.load/slow-path (quote java-time.core/zero?)))
(def ^{:arglists (quote ([a]))} negative? (java-time.impl.load/slow-path (quote java-time.core/negative?)))
(def ^{:arglists (quote ([a]))} negate (java-time.impl.load/slow-path (quote java-time.core/negate)))
(def ^{:arglists (quote ([a]))} abs (java-time.impl.load/slow-path (quote java-time.core/abs)))
(def ^{:arglists (quote ([o & os]))} max (java-time.impl.load/slow-path (quote java-time.core/max)))
(def ^{:arglists (quote ([o & os]))} min (java-time.impl.load/slow-path (quote java-time.core/min)))
(def ^{:arglists (quote ([x] [x y] [x y & more]))} before? (java-time.impl.load/slow-path (quote java-time.core/before?)))
(def ^{:arglists (quote [[x] [x y] [x y & more]])} not-after? (java-time.impl.load/slow-path (quote java-time.core/not-after?)))
(def ^{:arglists (quote ([x] [x y] [x y & more]))} after? (java-time.impl.load/slow-path (quote java-time.core/after?)))
(def ^{:arglists (quote [[x] [x y] [x y & more]])} not-before? (java-time.impl.load/slow-path (quote java-time.core/not-before?)))
(def ^{:arglists (quote ([o p]))} supports? (java-time.impl.load/slow-path (quote java-time.core/supports?)))
(def ^{:arglists (quote ([o]))} fields (java-time.impl.load/slow-path (quote java-time.core/fields)))
(def ^{:arglists (quote ([o]))} units (java-time.impl.load/slow-path (quote java-time.core/units)))
(def ^{:arglists (quote ([o]))} properties (java-time.impl.load/slow-path (quote java-time.core/properties)))
(def ^{:arglists (quote ([o k]))} property (java-time.impl.load/slow-path (quote java-time.core/property)))
(def ^{:arglists (quote ([o k] [o k1 k2] [o k1 k2 & ks]))} as (java-time.impl.load/slow-path (quote java-time.core/as)))
(def ^{:arglists (quote ([p]))} value (java-time.impl.load/slow-path (quote java-time.core/value)))
(def ^{:arglists (quote ([p]))} range (java-time.impl.load/slow-path (quote java-time.core/range)))
(def ^{:arglists (quote ([p]))} min-value (java-time.impl.load/slow-path (quote java-time.core/min-value)))
(def ^{:arglists (quote ([p]))} max-value (java-time.impl.load/slow-path (quote java-time.core/max-value)))
(def ^{:arglists (quote ([p]))} largest-min-value (java-time.impl.load/slow-path (quote java-time.core/largest-min-value)))
(def ^{:arglists (quote ([p]))} smallest-max-value (java-time.impl.load/slow-path (quote java-time.core/smallest-max-value)))
(def ^{:arglists (quote ([o u]))} truncate-to (java-time.impl.load/slow-path (quote java-time.core/truncate-to)))
(def ^{:arglists (quote ([o e u]))} time-between (java-time.impl.load/slow-path (quote java-time.core/time-between)))
(def ^{:arglists (quote ([o z]))} with-zone (java-time.impl.load/slow-path (quote java-time.core/with-zone)))
(def ^{:arglists (quote ([o & os]))} plus (java-time.impl.load/slow-path (quote java-time.core/plus)))
(def ^{:arglists (quote ([o & os]))} minus (java-time.impl.load/slow-path (quote java-time.core/minus)))
(def ^{:arglists (quote ([o v]))} multiply-by (java-time.impl.load/slow-path (quote java-time.core/multiply-by)))
(def ^{:arglists (quote ([o])), :tag java.time.chrono.Chronology} chronology (java-time.impl.load/slow-path (quote java-time.core/chronology)))
(def ^{:arglists (quote ([o]))} leap? (java-time.impl.load/slow-path (quote java-time.core/leap?)))
(def ^{:arglists (quote ([p v]))} with-value (java-time.impl.load/slow-path (quote java-time.core/with-value)))
(def ^{:arglists (quote ([p]))} with-min-value (java-time.impl.load/slow-path (quote java-time.core/with-min-value)))
(def ^{:arglists (quote ([p]))} with-max-value (java-time.impl.load/slow-path (quote java-time.core/with-max-value)))
(def ^{:arglists (quote ([p]))} with-largest-min-value (java-time.impl.load/slow-path (quote java-time.core/with-largest-min-value)))
(def ^{:arglists (quote ([p]))} with-smallest-max-value (java-time.impl.load/slow-path (quote java-time.core/with-smallest-max-value)))
(def ^{:arglists (quote ([] [arg_1_9470] [arg_1_9471 arg_2_9472])), :tag java.time.Duration} duration (java-time.impl.load/slow-path (quote java-time.amount/duration)))
(def ^{:arglists (quote ([] [arg_1_9506] [arg_1_9507 arg_2_9508] [arg_1_9509 arg_2_9510 arg_3_9511])), :tag java.time.Period} period (java-time.impl.load/slow-path (quote java-time.amount/period)))
(def ^{:arglists (quote ([v__8896__auto__]))} period? (java-time.impl.load/slow-path (quote java-time.amount/period?)))
(def ^{:arglists (quote ([v__8896__auto__]))} duration? (java-time.impl.load/slow-path (quote java-time.amount/duration?)))
(def ^{:arglists (quote ([v__9476__auto__])), :tag java.time.Duration} nanos (java-time.impl.load/slow-path (quote java-time.amount/nanos)))
(def ^{:arglists (quote ([micros])), :tag java.time.Duration} micros (java-time.impl.load/slow-path (quote java-time.amount/micros)))
(def ^{:arglists (quote ([v__9476__auto__])), :tag java.time.Duration} millis (java-time.impl.load/slow-path (quote java-time.amount/millis)))
(def ^{:arglists (quote ([v__9476__auto__])), :tag java.time.Duration} seconds (java-time.impl.load/slow-path (quote java-time.amount/seconds)))
(def ^{:arglists (quote ([v__9476__auto__])), :tag java.time.Duration} minutes (java-time.impl.load/slow-path (quote java-time.amount/minutes)))
(def ^{:arglists (quote ([v__9476__auto__])), :tag java.time.Duration} hours (java-time.impl.load/slow-path (quote java-time.amount/hours)))
(def ^{:arglists (quote ([v__9476__auto__])), :tag java.time.Duration} standard-days (java-time.impl.load/slow-path (quote java-time.amount/standard-days)))
(def ^{:arglists (quote ([v__9494__auto__])), :tag java.time.Period} days (java-time.impl.load/slow-path (quote java-time.amount/days)))
(def ^{:arglists (quote ([v__9494__auto__])), :tag java.time.Period} weeks (java-time.impl.load/slow-path (quote java-time.amount/weeks)))
(def ^{:arglists (quote ([v__9494__auto__])), :tag java.time.Period} months (java-time.impl.load/slow-path (quote java-time.amount/months)))
(def ^{:arglists (quote ([v__9494__auto__])), :tag java.time.Period} years (java-time.impl.load/slow-path (quote java-time.amount/years)))
(def ^{:arglists (quote ([o]))} unit? (java-time.impl.load/slow-path (quote java-time.properties/unit?)))
(def ^{:arglists (quote ([k] [entity k])), :tag java.time.temporal.TemporalUnit} unit (java-time.impl.load/slow-path (quote java-time.properties/unit)))
(def ^{:arglists (quote ([o]))} field? (java-time.impl.load/slow-path (quote java-time.properties/field?)))
(def ^{:arglists (quote ([k] [entity k])), :tag java.time.temporal.TemporalUnit} field (java-time.impl.load/slow-path (quote java-time.properties/field)))
(def ^{:arglists (quote ([min max] [{:keys [min-smallest min-largest max-smallest max-largest]}])), :tag java.time.temporal.ValueRange} value-range (java-time.impl.load/slow-path (quote java-time.temporal/value-range)))
(def ^{:arglists (quote ([] [arg_1_9244] [arg_1_9245 arg_2_9246])), :tag java.time.Instant} instant (java-time.impl.load/slow-path (quote java-time.temporal/instant)))
(def ^{:arglists (quote ([v__8896__auto__]))} instant? (java-time.impl.load/slow-path (quote java-time.temporal/instant?)))
(def ^{:arglists (quote ([] [arg_1_9263] [arg_1_9264 arg_2_9265] [arg_1_9266 arg_2_9267 arg_3_9268])), :tag java.time.LocalDate} local-date (java-time.impl.load/slow-path (quote java-time.local/local-date)))
(def ^{:arglists (quote ([] [y m d h] [y m d h mm] [y m d h mm ss] [y m d h mm ss n] [arg_1_9283] [arg_1_9284 arg_2_9285] [arg_1_9286 arg_2_9287 arg_3_9288])), :tag java.time.LocalDateTime} local-date-time (java-time.impl.load/slow-path (quote java-time.local/local-date-time)))
(def ^{:arglists (quote ([] [h m s nn] [arg_1_9273] [arg_1_9274 arg_2_9275] [arg_1_9276 arg_2_9277 arg_3_9278])), :tag java.time.LocalTime} local-time (java-time.impl.load/slow-path (quote java-time.local/local-time)))
(def ^{:arglists (quote ([v__8896__auto__]))} local-date? (java-time.impl.load/slow-path (quote java-time.local/local-date?)))
(def ^{:arglists (quote ([v__8896__auto__]))} local-date-time? (java-time.impl.load/slow-path (quote java-time.local/local-date-time?)))
(def ^{:arglists (quote ([v__8896__auto__]))} local-time? (java-time.impl.load/slow-path (quote java-time.local/local-time?)))
(def ^{:arglists (quote ([] [G__10020] [fmt__9938__auto__ arg__9939__auto__])), :tag java.time.Year} year (java-time.impl.load/slow-path (quote java-time.single-field/year)))
(def ^{:arglists (quote ([o__9937__auto__]))} year? (java-time.impl.load/slow-path (quote java-time.single-field/year?)))
(def ^{:arglists (quote ([] [v__9905__auto__] [fmt__9906__auto__ arg__9907__auto__])), :tag java.time.Month} month (java-time.impl.load/slow-path (quote java-time.single-field/month)))
(def ^{:arglists (quote ([o__9904__auto__]))} month? (java-time.impl.load/slow-path (quote java-time.single-field/month?)))
(def ^{:arglists (quote ([] [v__9905__auto__] [fmt__9906__auto__ arg__9907__auto__])), :tag java.time.DayOfWeek} day-of-week (java-time.impl.load/slow-path (quote java-time.single-field/day-of-week)))
(def ^{:arglists (quote ([o__9904__auto__]))} day-of-week? (java-time.impl.load/slow-path (quote java-time.single-field/day-of-week?)))
(def ^{:arglists (quote ([] [G__10031] [a__9951__auto__ b__9952__auto__])), :tag java.time.MonthDay} month-day (java-time.impl.load/slow-path (quote java-time.single-field/month-day)))
(def ^{:arglists (quote ([o__9948__auto__]))} month-day? (java-time.impl.load/slow-path (quote java-time.single-field/month-day?)))
(def ^{:arglists (quote ([] [G__10048] [a__9951__auto__ b__9952__auto__])), :tag java.time.YearMonth} year-month (java-time.impl.load/slow-path (quote java-time.single-field/year-month)))
(def ^{:arglists (quote ([o__9948__auto__]))} year-month? (java-time.impl.load/slow-path (quote java-time.single-field/year-month?)))
(def ^{:arglists (quote ([]))} available-zone-ids (java-time.impl.load/slow-path (quote java-time.zone/available-zone-ids)))
(def ^{:arglists (quote ([] [arg_1_9619] [arg_1_9620 arg_2_9621])), :tag java.time.ZoneId} zone-id (java-time.impl.load/slow-path (quote java-time.zone/zone-id)))
(def ^{:arglists (quote ([] [o] [h m] [h m s])), :tag java.time.ZoneOffset} zone-offset (java-time.impl.load/slow-path (quote java-time.zone/zone-offset)))
(def ^{:arglists (quote ([] [y m d h] [y mo d h m] [y mo d h m s] [y mo d h m s n] [y mo d h m s n o] [arg_1_9627] [arg_1_9628 arg_2_9629] [arg_1_9630 arg_2_9631 arg_3_9632])), :tag java.time.OffsetDateTime} offset-date-time (java-time.impl.load/slow-path (quote java-time.zone/offset-date-time)))
(def ^{:arglists (quote ([] [h m s] [h m s n] [h m s n o] [arg_1_9637] [arg_1_9638 arg_2_9639])), :tag java.time.OffsetTime} offset-time (java-time.impl.load/slow-path (quote java-time.zone/offset-time)))
(def ^{:arglists (quote ([] [y m d h] [y mo d h m] [y mo d h m s] [y mo d h m s n] [y mo d h m s n o] [arg_1_9644] [arg_1_9645 arg_2_9646] [arg_1_9647 arg_2_9648 arg_3_9649])), :tag java.time.ZonedDateTime} zoned-date-time (java-time.impl.load/slow-path (quote java-time.zone/zoned-date-time)))
(def ^{:arglists (quote ([] [k])), :tag java.time.Clock} system-clock (java-time.impl.load/slow-path (quote java-time.zone/system-clock)))
(def ^{:arglists (quote ([] [i] [i z])), :tag java.time.Clock} fixed-clock (java-time.impl.load/slow-path (quote java-time.zone/fixed-clock)))
(def ^{:arglists (quote ([d] [^Clock c d])), :tag java.time.Clock} offset-clock (java-time.impl.load/slow-path (quote java-time.zone/offset-clock)))
(def ^{:arglists (quote ([d] [^Clock c d])), :tag java.time.Clock} tick-clock (java-time.impl.load/slow-path (quote java-time.zone/tick-clock)))
(def ^{:arglists (quote ([x]))} clock? (java-time.impl.load/slow-path (quote java-time.zone/clock?)))
(def ^{:arglists (quote ([v__8896__auto__]))} zone-id? (java-time.impl.load/slow-path (quote java-time.zone/zone-id?)))
(def ^{:arglists (quote ([v__8896__auto__]))} zoned-date-time? (java-time.impl.load/slow-path (quote java-time.zone/zoned-date-time?)))
(def ^{:arglists (quote ([v__8896__auto__]))} offset-date-time? (java-time.impl.load/slow-path (quote java-time.zone/offset-date-time?)))
(def ^{:arglists (quote ([v__8896__auto__]))} offset-time? (java-time.impl.load/slow-path (quote java-time.zone/offset-time?)))
(def ^{:arglists (quote ([^ZonedDateTime zdt z]))} with-zone-same-instant (java-time.impl.load/slow-path (quote java-time.zone/with-zone-same-instant)))
(def ^{:arglists (quote ([o offset]))} with-offset (java-time.impl.load/slow-path (quote java-time.zone/with-offset)))
(def ^{:arglists (quote ([o offset]))} with-offset-same-instant (java-time.impl.load/slow-path (quote java-time.zone/with-offset-same-instant)))
(def ^{:arglists (quote ([] [instant] [instant zone])), :tag java.time.Clock} mock-clock (java-time.impl.load/slow-path (quote java-time.mock/mock-clock)))
(def ^{:arglists (quote ([^IMockClock clock amount]))} advance-clock! (java-time.impl.load/slow-path (quote java-time.mock/advance-clock!)))
(def ^{:arglists (quote ([^Clock clock time]))} set-clock! (java-time.impl.load/slow-path (quote java-time.mock/set-clock!)))
(def ^{:arglists (quote ([e] [e value-fn]))} as-map (java-time.impl.load/slow-path (quote java-time.convert/as-map)))
(def ^{:arglists (quote ([amount from-unit to-unit]))} convert-amount (java-time.impl.load/slow-path (quote java-time.convert/convert-amount)))
(def ^{:arglists (quote ([o])), :tag java.util.Date} to-java-date (java-time.impl.load/slow-path (quote java-time.convert/to-java-date)))
(def ^{:arglists (quote ([o])), :tag java.sql.Date} to-sql-date (java-time.impl.load/slow-path (quote java-time.convert/to-sql-date)))
(def ^{:arglists (quote ([o])), :tag java.sql.Timestamp} to-sql-timestamp (java-time.impl.load/slow-path (quote java-time.convert/to-sql-timestamp)))
(def ^{:arglists (quote (^long [o]))} to-millis-from-epoch (java-time.impl.load/slow-path (quote java-time.convert/to-millis-from-epoch)))
(def ^{:arglists (quote ([o__10195__auto__]))} monday? (java-time.impl.load/slow-path (quote java-time.sugar/monday?)))
(def ^{:arglists (quote ([o__10195__auto__]))} tuesday? (java-time.impl.load/slow-path (quote java-time.sugar/tuesday?)))
(def ^{:arglists (quote ([o__10195__auto__]))} wednesday? (java-time.impl.load/slow-path (quote java-time.sugar/wednesday?)))
(def ^{:arglists (quote ([o__10195__auto__]))} thursday? (java-time.impl.load/slow-path (quote java-time.sugar/thursday?)))
(def ^{:arglists (quote ([o__10195__auto__]))} friday? (java-time.impl.load/slow-path (quote java-time.sugar/friday?)))
(def ^{:arglists (quote ([o__10195__auto__]))} saturday? (java-time.impl.load/slow-path (quote java-time.sugar/saturday?)))
(def ^{:arglists (quote ([o__10195__auto__]))} sunday? (java-time.impl.load/slow-path (quote java-time.sugar/sunday?)))
(def ^{:arglists (quote ([dt]))} weekend? (java-time.impl.load/slow-path (quote java-time.sugar/weekend?)))
(def ^{:arglists (quote ([dt]))} weekday? (java-time.impl.load/slow-path (quote java-time.sugar/weekday?)))
(def ^{:arglists (quote ([f initial v & vs]))} iterate (java-time.impl.load/slow-path (quote java-time.seqs/iterate)))
(def ^{:arglists (quote ([entity adjuster & args]))} adjust (java-time.impl.load/slow-path (quote java-time.adjuster/adjust)))
(def ^{:arglists (quote ([o] [fmt o]))} format (java-time.impl.load/slow-path (quote java-time.format/format)))
(def ^{:arglists (quote ([fmt] [fmt {:keys [resolver-style case], :or {case :sensitive}}])), :tag java.time.format.DateTimeFormatter} formatter (java-time.impl.load/slow-path (quote java-time.format/formatter)))
(def ^{:arglists (quote ([] [a] [a b])), :tag java.util.Date} java-date (java-time.impl.load/slow-path (quote java-time.pre-java8/java-date)))
(def ^{:arglists (quote ([] [G__10327] [G__10328 G__10329] [G__10330 G__10331 G__10332])), :tag java.sql.Date} sql-date (java-time.impl.load/slow-path (quote java-time.pre-java8/sql-date)))
(def ^{:arglists (quote ([] [G__10334] [G__10335 G__10336] [G__10337 G__10338 G__10339] [G__10340 G__10341 G__10342 G__10343] [G__10344 G__10345 G__10346 G__10347 G__10348] [G__10349 G__10350 G__10351 G__10352 G__10353 G__10354] [G__10355 G__10356 G__10357 G__10358 G__10359 G__10360 G__10361])), :tag java.sql.Timestamp} sql-timestamp (java-time.impl.load/slow-path (quote java-time.pre-java8/sql-timestamp)))
(def ^{:arglists (quote ([instant-or-millis]))} instant->sql-timestamp (java-time.impl.load/slow-path (quote java-time.pre-java8/instant->sql-timestamp)))
(java-time.impl.load/when-class "java.sql.Time" (def ^{:arglists (quote ([] [G__10364] [G__10365 G__10366] [G__10367 G__10368 G__10369])), :tag java.sql.Time} sql-time (java-time.impl.load/slow-path (quote java-time.pre-java8/sql-time))))
(def ^{:arglists (quote ([i new-start]))} move-start-to (java-time.impl.load/slow-path (quote java-time.interval/move-start-to)))
(def ^{:arglists (quote ([i new-end]))} move-end-to (java-time.impl.load/slow-path (quote java-time.interval/move-end-to)))
(def ^{:arglists (quote ([i & os]))} move-start-by (java-time.impl.load/slow-path (quote java-time.interval/move-start-by)))
(def ^{:arglists (quote ([i & os]))} move-end-by (java-time.impl.load/slow-path (quote java-time.interval/move-end-by)))
(def ^{:arglists (quote ([i]))} start (java-time.impl.load/slow-path (quote java-time.interval/start)))
(def ^{:arglists (quote ([i]))} end (java-time.impl.load/slow-path (quote java-time.interval/end)))
(def ^{:arglists (quote ([i o]))} contains? (java-time.impl.load/slow-path (quote java-time.interval/contains?)))
(def ^{:arglists (quote ([i oi]))} overlaps? (java-time.impl.load/slow-path (quote java-time.interval/overlaps?)))
(def ^{:arglists (quote ([i oi]))} abuts? (java-time.impl.load/slow-path (quote java-time.interval/abuts?)))
(def ^{:arglists (quote ([i oi]))} overlap (java-time.impl.load/slow-path (quote java-time.interval/overlap)))
(def ^{:arglists (quote ([i oi]))} gap (java-time.impl.load/slow-path (quote java-time.interval/gap)))
(java-time.impl.load/when-class "org.threeten.extra.Temporals" (def ^{:arglists (quote ([^String o] [a b])), :tag org.threeten.extra.Interval} interval (java-time.impl.load/slow-path (quote java-time.interval/interval))) (def ^{:arglists (quote ([o]))} interval? (java-time.impl.load/slow-path (quote java-time.interval/interval?))) (def ^{:arglists (quote ([] [v__9905__auto__] [fmt__9906__auto__ arg__9907__auto__])), :tag org.threeten.extra.AmPm} am-pm (java-time.impl.load/slow-path (quote java-time.single-field/am-pm))) (def ^{:arglists (quote ([o__9904__auto__]))} am-pm? (java-time.impl.load/slow-path (quote java-time.single-field/am-pm?))) (def ^{:arglists (quote ([] [v__9905__auto__] [fmt__9906__auto__ arg__9907__auto__])), :tag org.threeten.extra.Quarter} quarter (java-time.impl.load/slow-path (quote java-time.single-field/quarter))) (def ^{:arglists (quote ([o__9904__auto__]))} quarter? (java-time.impl.load/slow-path (quote java-time.single-field/quarter?))) (def ^{:arglists (quote ([] [G__10113] [fmt__9938__auto__ arg__9939__auto__])), :tag org.threeten.extra.DayOfMonth} day-of-month (java-time.impl.load/slow-path (quote java-time.single-field/day-of-month))) (def ^{:arglists (quote ([o__9937__auto__]))} day-of-month? (java-time.impl.load/slow-path (quote java-time.single-field/day-of-month?))) (def ^{:arglists (quote ([] [G__10124] [fmt__9938__auto__ arg__9939__auto__])), :tag org.threeten.extra.DayOfYear} day-of-year (java-time.impl.load/slow-path (quote java-time.single-field/day-of-year))) (def ^{:arglists (quote ([o__9937__auto__]))} day-of-year? (java-time.impl.load/slow-path (quote java-time.single-field/day-of-year?))) (def ^{:arglists (quote ([] [G__10136] [a__9951__auto__ b__9952__auto__])), :tag org.threeten.extra.YearQuarter} year-quarter (java-time.impl.load/slow-path (quote java-time.single-field/year-quarter))) (def ^{:arglists (quote ([o__9948__auto__]))} year-quarter? (java-time.impl.load/slow-path (quote java-time.single-field/year-quarter?))))
(let [t (Thread. java-time.impl.load/async-load-fast-path)] (if *compile-files* (.join t) (do (.start t) (.join java-time.impl.load/serialized-load-thread))))
