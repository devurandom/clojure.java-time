;; NOTE: This namespace is generated by java-time.dev.gen
(ns java-time (:refer-clojure :exclude (zero? range iterate max min contains? format abs)) (:require java-time.impl.load))
(defmacro with-clock {:doc "Executes the given `forms` in the scope of the provided `clock`.\n\n  All the temporal entities that get created without parameters will inherit\n  their values from the clock:\n\n    (with-clock (system-clock \"Europe/London\")\n      (zone-id))\n    => #<java.time.ZoneRegion Europe/London>"} [c & forms] (list* (quote java-time.clock/with-clock) c forms))
(defmacro when-joda-time-loaded {:doc "Execute the `body` when Joda-Time classes are found on the classpath.\n\n  Take care - when AOT-compiling code using this macro, the Joda-Time classes\n  must be on the classpath at compile time!"} [& body] (list* (quote java-time.util/when-joda-time-loaded) body))
(def with-clock-fn (java-time.impl.load/slow-path (quote java-time.clock/with-clock-fn)))
(def zero? (java-time.impl.load/slow-path (quote java-time.core/zero?)))
(def negative? (java-time.impl.load/slow-path (quote java-time.core/negative?)))
(def negate (java-time.impl.load/slow-path (quote java-time.core/negate)))
(def abs (java-time.impl.load/slow-path (quote java-time.core/abs)))
(def max (java-time.impl.load/slow-path (quote java-time.core/max)))
(def min (java-time.impl.load/slow-path (quote java-time.core/min)))
(def before? (java-time.impl.load/slow-path (quote java-time.core/before?)))
(def not-after? (java-time.impl.load/slow-path (quote java-time.core/not-after?)))
(def after? (java-time.impl.load/slow-path (quote java-time.core/after?)))
(def not-before? (java-time.impl.load/slow-path (quote java-time.core/not-before?)))
(def supports? (java-time.impl.load/slow-path (quote java-time.core/supports?)))
(def fields (java-time.impl.load/slow-path (quote java-time.core/fields)))
(def units (java-time.impl.load/slow-path (quote java-time.core/units)))
(def properties (java-time.impl.load/slow-path (quote java-time.core/properties)))
(def property (java-time.impl.load/slow-path (quote java-time.core/property)))
(def as (java-time.impl.load/slow-path (quote java-time.core/as)))
(def value (java-time.impl.load/slow-path (quote java-time.core/value)))
(def range (java-time.impl.load/slow-path (quote java-time.core/range)))
(def min-value (java-time.impl.load/slow-path (quote java-time.core/min-value)))
(def max-value (java-time.impl.load/slow-path (quote java-time.core/max-value)))
(def largest-min-value (java-time.impl.load/slow-path (quote java-time.core/largest-min-value)))
(def smallest-max-value (java-time.impl.load/slow-path (quote java-time.core/smallest-max-value)))
(def truncate-to (java-time.impl.load/slow-path (quote java-time.core/truncate-to)))
(def time-between (java-time.impl.load/slow-path (quote java-time.core/time-between)))
(def with-zone (java-time.impl.load/slow-path (quote java-time.core/with-zone)))
(def plus (java-time.impl.load/slow-path (quote java-time.core/plus)))
(def minus (java-time.impl.load/slow-path (quote java-time.core/minus)))
(def multiply-by (java-time.impl.load/slow-path (quote java-time.core/multiply-by)))
(def ^java.time.chrono.Chronology chronology (java-time.impl.load/slow-path (quote java-time.core/chronology)))
(def leap? (java-time.impl.load/slow-path (quote java-time.core/leap?)))
(def with-value (java-time.impl.load/slow-path (quote java-time.core/with-value)))
(def with-min-value (java-time.impl.load/slow-path (quote java-time.core/with-min-value)))
(def with-max-value (java-time.impl.load/slow-path (quote java-time.core/with-max-value)))
(def with-largest-min-value (java-time.impl.load/slow-path (quote java-time.core/with-largest-min-value)))
(def with-smallest-max-value (java-time.impl.load/slow-path (quote java-time.core/with-smallest-max-value)))
(def ^java.time.Duration duration (java-time.impl.load/slow-path (quote java-time.amount/duration)))
(def ^java.time.Period period (java-time.impl.load/slow-path (quote java-time.amount/period)))
(def period? (java-time.impl.load/slow-path (quote java-time.amount/period?)))
(def duration? (java-time.impl.load/slow-path (quote java-time.amount/duration?)))
(def ^java.time.Duration nanos (java-time.impl.load/slow-path (quote java-time.amount/nanos)))
(def ^java.time.Duration micros (java-time.impl.load/slow-path (quote java-time.amount/micros)))
(def ^java.time.Duration millis (java-time.impl.load/slow-path (quote java-time.amount/millis)))
(def ^java.time.Duration seconds (java-time.impl.load/slow-path (quote java-time.amount/seconds)))
(def ^java.time.Duration minutes (java-time.impl.load/slow-path (quote java-time.amount/minutes)))
(def ^java.time.Duration hours (java-time.impl.load/slow-path (quote java-time.amount/hours)))
(def ^java.time.Duration standard-days (java-time.impl.load/slow-path (quote java-time.amount/standard-days)))
(def ^java.time.Period days (java-time.impl.load/slow-path (quote java-time.amount/days)))
(def ^java.time.Period weeks (java-time.impl.load/slow-path (quote java-time.amount/weeks)))
(def ^java.time.Period months (java-time.impl.load/slow-path (quote java-time.amount/months)))
(def ^java.time.Period years (java-time.impl.load/slow-path (quote java-time.amount/years)))
(def unit? (java-time.impl.load/slow-path (quote java-time.properties/unit?)))
(def ^java.time.temporal.TemporalUnit unit (java-time.impl.load/slow-path (quote java-time.properties/unit)))
(def field? (java-time.impl.load/slow-path (quote java-time.properties/field?)))
(def ^java.time.temporal.TemporalUnit field (java-time.impl.load/slow-path (quote java-time.properties/field)))
(def ^java.time.temporal.ValueRange value-range (java-time.impl.load/slow-path (quote java-time.temporal/value-range)))
(def ^java.time.Instant instant (java-time.impl.load/slow-path (quote java-time.temporal/instant)))
(def instant? (java-time.impl.load/slow-path (quote java-time.temporal/instant?)))
(def ^java.time.LocalDate local-date (java-time.impl.load/slow-path (quote java-time.local/local-date)))
(def ^java.time.LocalDateTime local-date-time (java-time.impl.load/slow-path (quote java-time.local/local-date-time)))
(def ^java.time.LocalTime local-time (java-time.impl.load/slow-path (quote java-time.local/local-time)))
(def local-date? (java-time.impl.load/slow-path (quote java-time.local/local-date?)))
(def local-date-time? (java-time.impl.load/slow-path (quote java-time.local/local-date-time?)))
(def local-time? (java-time.impl.load/slow-path (quote java-time.local/local-time?)))
(def ^java.time.Year year (java-time.impl.load/slow-path (quote java-time.single-field/year)))
(def year? (java-time.impl.load/slow-path (quote java-time.single-field/year?)))
(def ^java.time.Month month (java-time.impl.load/slow-path (quote java-time.single-field/month)))
(def month? (java-time.impl.load/slow-path (quote java-time.single-field/month?)))
(def ^java.time.DayOfWeek day-of-week (java-time.impl.load/slow-path (quote java-time.single-field/day-of-week)))
(def day-of-week? (java-time.impl.load/slow-path (quote java-time.single-field/day-of-week?)))
(def ^java.time.MonthDay month-day (java-time.impl.load/slow-path (quote java-time.single-field/month-day)))
(def month-day? (java-time.impl.load/slow-path (quote java-time.single-field/month-day?)))
(def ^java.time.YearMonth year-month (java-time.impl.load/slow-path (quote java-time.single-field/year-month)))
(def year-month? (java-time.impl.load/slow-path (quote java-time.single-field/year-month?)))
(def available-zone-ids (java-time.impl.load/slow-path (quote java-time.zone/available-zone-ids)))
(def ^java.time.ZoneId zone-id (java-time.impl.load/slow-path (quote java-time.zone/zone-id)))
(def ^java.time.ZoneOffset zone-offset (java-time.impl.load/slow-path (quote java-time.zone/zone-offset)))
(def ^java.time.OffsetDateTime offset-date-time (java-time.impl.load/slow-path (quote java-time.zone/offset-date-time)))
(def ^java.time.OffsetTime offset-time (java-time.impl.load/slow-path (quote java-time.zone/offset-time)))
(def ^java.time.ZonedDateTime zoned-date-time (java-time.impl.load/slow-path (quote java-time.zone/zoned-date-time)))
(def ^java.time.Clock system-clock (java-time.impl.load/slow-path (quote java-time.zone/system-clock)))
(def ^java.time.Clock fixed-clock (java-time.impl.load/slow-path (quote java-time.zone/fixed-clock)))
(def ^java.time.Clock offset-clock (java-time.impl.load/slow-path (quote java-time.zone/offset-clock)))
(def ^java.time.Clock tick-clock (java-time.impl.load/slow-path (quote java-time.zone/tick-clock)))
(def clock? (java-time.impl.load/slow-path (quote java-time.zone/clock?)))
(def zone-id? (java-time.impl.load/slow-path (quote java-time.zone/zone-id?)))
(def zoned-date-time? (java-time.impl.load/slow-path (quote java-time.zone/zoned-date-time?)))
(def offset-date-time? (java-time.impl.load/slow-path (quote java-time.zone/offset-date-time?)))
(def offset-time? (java-time.impl.load/slow-path (quote java-time.zone/offset-time?)))
(def with-zone-same-instant (java-time.impl.load/slow-path (quote java-time.zone/with-zone-same-instant)))
(def with-offset (java-time.impl.load/slow-path (quote java-time.zone/with-offset)))
(def with-offset-same-instant (java-time.impl.load/slow-path (quote java-time.zone/with-offset-same-instant)))
(def ^java.time.Clock mock-clock (java-time.impl.load/slow-path (quote java-time.mock/mock-clock)))
(def advance-clock! (java-time.impl.load/slow-path (quote java-time.mock/advance-clock!)))
(def set-clock! (java-time.impl.load/slow-path (quote java-time.mock/set-clock!)))
(def as-map (java-time.impl.load/slow-path (quote java-time.convert/as-map)))
(def convert-amount (java-time.impl.load/slow-path (quote java-time.convert/convert-amount)))
(def ^java.util.Date to-java-date (java-time.impl.load/slow-path (quote java-time.convert/to-java-date)))
(def ^java.sql.Date to-sql-date (java-time.impl.load/slow-path (quote java-time.convert/to-sql-date)))
(def ^java.sql.Timestamp to-sql-timestamp (java-time.impl.load/slow-path (quote java-time.convert/to-sql-timestamp)))
(def to-millis-from-epoch (java-time.impl.load/slow-path (quote java-time.convert/to-millis-from-epoch)))
(def monday? (java-time.impl.load/slow-path (quote java-time.sugar/monday?)))
(def tuesday? (java-time.impl.load/slow-path (quote java-time.sugar/tuesday?)))
(def wednesday? (java-time.impl.load/slow-path (quote java-time.sugar/wednesday?)))
(def thursday? (java-time.impl.load/slow-path (quote java-time.sugar/thursday?)))
(def friday? (java-time.impl.load/slow-path (quote java-time.sugar/friday?)))
(def saturday? (java-time.impl.load/slow-path (quote java-time.sugar/saturday?)))
(def sunday? (java-time.impl.load/slow-path (quote java-time.sugar/sunday?)))
(def weekend? (java-time.impl.load/slow-path (quote java-time.sugar/weekend?)))
(def weekday? (java-time.impl.load/slow-path (quote java-time.sugar/weekday?)))
(def iterate (java-time.impl.load/slow-path (quote java-time.seqs/iterate)))
(def adjust (java-time.impl.load/slow-path (quote java-time.adjuster/adjust)))
(def format (java-time.impl.load/slow-path (quote java-time.format/format)))
(def ^java.time.format.DateTimeFormatter formatter (java-time.impl.load/slow-path (quote java-time.format/formatter)))
(def ^java.util.Date java-date (java-time.impl.load/slow-path (quote java-time.pre-java8/java-date)))
(def ^java.sql.Date sql-date (java-time.impl.load/slow-path (quote java-time.pre-java8/sql-date)))
(def ^java.sql.Timestamp sql-timestamp (java-time.impl.load/slow-path (quote java-time.pre-java8/sql-timestamp)))
(def instant->sql-timestamp (java-time.impl.load/slow-path (quote java-time.pre-java8/instant->sql-timestamp)))
(java-time.impl.load/when-class "java.sql.Time" (def ^java.sql.Time sql-time (java-time.impl.load/slow-path (quote java-time.pre-java8/sql-time))))
(def move-start-to (java-time.impl.load/slow-path (quote java-time.interval/move-start-to)))
(def move-end-to (java-time.impl.load/slow-path (quote java-time.interval/move-end-to)))
(def move-start-by (java-time.impl.load/slow-path (quote java-time.interval/move-start-by)))
(def move-end-by (java-time.impl.load/slow-path (quote java-time.interval/move-end-by)))
(def start (java-time.impl.load/slow-path (quote java-time.interval/start)))
(def end (java-time.impl.load/slow-path (quote java-time.interval/end)))
(def contains? (java-time.impl.load/slow-path (quote java-time.interval/contains?)))
(def overlaps? (java-time.impl.load/slow-path (quote java-time.interval/overlaps?)))
(def abuts? (java-time.impl.load/slow-path (quote java-time.interval/abuts?)))
(def overlap (java-time.impl.load/slow-path (quote java-time.interval/overlap)))
(def gap (java-time.impl.load/slow-path (quote java-time.interval/gap)))
(java-time.impl.load/when-class "org.threeten.extra.Temporals" (def ^org.threeten.extra.Interval interval (java-time.impl.load/slow-path (quote java-time.interval/interval))) (def interval? (java-time.impl.load/slow-path (quote java-time.interval/interval?))) (def ^org.threeten.extra.AmPm am-pm (java-time.impl.load/slow-path (quote java-time.single-field/am-pm))) (def am-pm? (java-time.impl.load/slow-path (quote java-time.single-field/am-pm?))) (def ^org.threeten.extra.Quarter quarter (java-time.impl.load/slow-path (quote java-time.single-field/quarter))) (def quarter? (java-time.impl.load/slow-path (quote java-time.single-field/quarter?))) (def ^org.threeten.extra.DayOfMonth day-of-month (java-time.impl.load/slow-path (quote java-time.single-field/day-of-month))) (def day-of-month? (java-time.impl.load/slow-path (quote java-time.single-field/day-of-month?))) (def ^org.threeten.extra.DayOfYear day-of-year (java-time.impl.load/slow-path (quote java-time.single-field/day-of-year))) (def day-of-year? (java-time.impl.load/slow-path (quote java-time.single-field/day-of-year?))) (def ^org.threeten.extra.YearQuarter year-quarter (java-time.impl.load/slow-path (quote java-time.single-field/year-quarter))) (def year-quarter? (java-time.impl.load/slow-path (quote java-time.single-field/year-quarter?))))
(let [t (Thread. java-time.impl.load/async-load-fast-path)] (if *compile-files* (.join t) (do (.start t) (.join java-time.impl.load/serialized-load-thread))))
